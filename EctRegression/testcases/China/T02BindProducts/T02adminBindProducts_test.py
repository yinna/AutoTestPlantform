# NOTE: Generated By HttpRunner v3.1.4
# FROM: testcases\China\T02BindProducts\T02adminBindProducts.yml


import sys
from pathlib import Path

sys.path.insert(0, str(Path(__file__).parent.parent.parent.parent))


from httprunner import HttpRunner, Config, Step, RunRequest, RunTestCase

from testcases.China.T01setUp.T02cnAdminLogin_test import (
    TestCaseT02Cnadminlogin as T02Cnadminlogin,
)


class TestCaseT02Adminbindproducts(HttpRunner):

    config = (
        Config("request methods testcase with functions")
        .variables(
            **{
                "today": "${getCurrentDay()}",
                "todayString": "${getJoinString($today,start,noneed)}",
                "weekday": "${getDateAfterSomeDay(28)}",
                "weekdayString": "${getJoinString($weekday,end,noneed)}",
                "porCityId": "${getCityUuid(Shanghai)}",
                "fndCityId": "${getCityUuid(Karachi)}",
            }
        )
        .base_url("http://mall.ectpp.opsmart.cn")
        .verify(False)
    )

    teststeps = [
        Step(RunTestCase("login").call(T02Cnadminlogin).export(*["cnAdminUserToken"])),
        Step(
            RunRequest("admin create price template")
            .post("/api/product/sailing/pricing-draft/GENERAL")
            .with_headers(
                **{
                    "X-Auth-Token": "$cnAdminUserToken",
                    "Content-Type": "application/json;charset=UTF-8",
                }
            )
            .with_json(
                {
                    "porName": "Shanghai",
                    "porId": "738872886232873",
                    "haulageType": "CY-CY",
                    "obHaulageType": "CY",
                    "ibHaulageType": "CY",
                    "currency": "USD",
                    "tradeLaneCode": "AAW",
                    "serviceCode": "PMX",
                    "porCityId": "$porCityId",
                    "porCityName": "Shanghai",
                    "fndCityName": "Karachi",
                    "fndCityId": "$fndCityId",
                    "commodityCode": "automation运价模板",
                    "effectiveStartDate": "$todayString",
                    "effectiveEndDate": "$weekdayString",
                    "cargoDirectionAndPricingTag": "DEFAULT + DEFAULT",
                    "cargoDirection": "DEFAULT",
                    "pricingTag": "DEFAULT",
                    "prodType": "IP",
                    "paymentTerms": "PC",
                    "channelCode": "GENERAL",
                    "cargoType": "GENERAL",
                    "routePricingCntrDraftList": [
                        {
                            "oceanFee": 0,
                            "transferFee": 0,
                            "isNew": True,
                            "cntrType": "20GP",
                            "value": "20GP",
                            "label": "20GP",
                            "cntrTypeOptions": [{"label": "20GP", "value": "20GP"}],
                            "price": "111",
                        },
                        {
                            "oceanFee": 0,
                            "transferFee": 0,
                            "isNew": True,
                            "cntrType": "40GP",
                            "value": "40GP",
                            "label": "40GP",
                            "cntrTypeOptions": [{"label": "40GP", "value": "40GP"}],
                            "price": "222",
                        },
                        {
                            "oceanFee": 0,
                            "transferFee": 0,
                            "isNew": True,
                            "cntrType": "40HQ",
                            "value": "40HQ",
                            "label": "40HQ",
                            "cntrTypeOptions": [{"label": "40HQ", "value": "40HQ"}],
                            "price": "333",
                        },
                    ],
                }
            )
            .teardown_hook("${sleepTime(2)}")
            .validate()
            .assert_equal("status_code", 200)
        ),
        Step(
            RunRequest("search last step create successful and get template id")
            .post("/api/product/sailing/pricing-draft/GENERAL/search")
            .with_headers(
                **{
                    "X-Auth-Token": "$cnAdminUserToken",
                    "Content-Type": "application/json;charset=UTF-8",
                }
            )
            .with_json(
                {
                    "serviceCode": "PMX",
                    "fndCityName": "Karachi",
                    "fndCityId": "738872886233842",
                    "status": "NEW",
                    "updateBy": "pogba.ye",
                    "sortBy": "updateTime",
                    "direction": "descending",
                    "porTransferGroupId": "",
                    "prodTypes": [],
                    "paymentTerms": [],
                    "channelCode": "GENERAL",
                    "page": 1,
                    "size": 20,
                    "commodityCode": "automation运价模板",
                    "porCityId": "738872886232873",
                }
            )
            .extract()
            .with_jmespath("body.content[0].uuid", "priceTemplateId")
            .validate()
            .assert_equal("status_code", 200)
            .assert_equal("body.totalElements", 1)
        ),
        Step(
            RunRequest("price template page bind product")
            .post("/api/product/sailing/product/GENERAL/bindSvvd")
            .with_headers(
                **{
                    "X-Auth-Token": "$cnAdminUserToken",
                    "Content-Type": "application/json;charset=UTF-8",
                }
            )
            .with_json(["$priceTemplateId"])
            .teardown_hook("${sleepTime(2)}")
            .extract()
            .with_jmespath("body.taskId", "taskId")
            .validate()
            .assert_equal("status_code", 200)
            .assert_equal("body.status", "IN_PROGRESS")
            .assert_not_equal("body.totalElements", 0)
        ),
        Step(
            RunRequest("product release page batch submit audit")
            .post("/api/product/sailing/product/GENERAL/request-review-product")
            .with_headers(
                **{
                    "X-Auth-Token": "$cnAdminUserToken",
                    "Content-Type": "application/json;charset=UTF-8",
                }
            )
            .with_json(
                {
                    "porCity": {
                        "createTime": None,
                        "createBy": None,
                        "updateTime": "2019-05-02T00:07:51Z",
                        "updateBy": "SYS",
                        "isActive": 1,
                        "id": "738872886232873",
                        "unlocode": "CNSHA",
                        "cityName": "Shanghai",
                        "cntyName": "Shanghai",
                        "stateName": "Shanghai",
                        "stateCode": "SH",
                        "ctryName": "China",
                        "ctryCode": "CN",
                        "cityFullNameEn": "Shanghai",
                        "cityFullNameCn": "上海",
                        "refUuid": None,
                        "isDummy": None,
                    },
                    "fndCity": {
                        "createTime": None,
                        "createBy": None,
                        "updateTime": "2019-05-02T00:09:32Z",
                        "updateBy": "SYS",
                        "isActive": 1,
                        "id": "738872886233842",
                        "unlocode": "PKKAR",
                        "cityName": "Karachi",
                        "cntyName": None,
                        "stateName": "Sindh",
                        "stateCode": None,
                        "ctryName": "Pakistan",
                        "ctryCode": "PK",
                        "cityFullNameEn": "Karachi",
                        "cityFullNameCn": "卡拉奇",
                        "refUuid": None,
                        "isDummy": None,
                    },
                    "serviceCode": "PMX",
                    "vesselName": "",
                    "updateBy": "pogba.ye",
                    "status": "DRAFT",
                    "pageType": "RELEASE",
                    "sortedCriteria": {
                        "releaseBatchStatus": "BLANK",
                        "sortItem": "tradeLaneCode",
                        "sortOrder": "descending",
                    },
                    "targetIds": [],
                    "searchProdTypes": [],
                    "searchPaymentTerms": [],
                    "tradeLaneCode": "AAW",
                    "firstServiceCode": "",
                    "voyageNo": "",
                    "direction": "",
                    "firstPolPort": {},
                    "porFacilityCode": "",
                    "polPort": {},
                    "transitPortId": "",
                    "podPort": {},
                    "lastPodPort": {},
                    "fndFacilityCode": "",
                    "channelCode": "GENERAL",
                    "commodityCode": "automation运价模板",
                    "notificationParam": {"isTrusted": True},
                    "sendEmail": False,
                }
            )
            .extract()
            .with_jmespath("body.businessKey", "reviewBusinessKey")
            .validate()
            .assert_equal("status_code", 200)
            .assert_contains("body.businessKey", "pogba.ye")
        ),
        Step(
            RunRequest("product review page get review task id")
            .get("/api/workflow/internal/GENERAL/task/pending")
            .with_headers(
                **{
                    "X-Auth-Token": "$cnAdminUserToken",
                    "Content-Type": "application/json;charset=UTF-8",
                }
            )
            .extract()
            .with_jmespath("body[0].taskId", "reviewTaskId")
            .validate()
            .assert_equal("status_code", 200)
            .assert_equal("body[0].businessKey", "$reviewBusinessKey")
        ),
        Step(
            RunRequest("product review page audit success")
            .post("/api/workflow/internal/product/task/accept")
            .with_headers(
                **{
                    "X-Auth-Token": "$cnAdminUserToken",
                    "Content-Type": "application/json;charset=UTF-8",
                }
            )
            .with_json({"taskId": "$reviewTaskId"})
            .validate()
            .assert_equal("status_code", 200)
        ),
    ]


if __name__ == "__main__":
    TestCaseT02Adminbindproducts().test_start()
